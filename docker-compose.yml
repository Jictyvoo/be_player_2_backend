version: "3.8"

# services describe the containers that will start
services:
  # mysql_db container
  player2mysql_db:
    image: mysql:latest
    container_name: player2mysql_db
    ports:
      - "6603:3306"
    restart: always
    volumes:
      - player2_dbdata:/var/lib/mysql # Helps to store MySQL data in `player2_dbdata`
    environment:
      MYSQL_ROOT_PASSWORD: challenge@player_2!
      MYSQL_DATABASE: player2_challenge
      MYSQL_USER: a_new_player
      MYSQL_PASSWORD: has_entered.TH3G4ME
    networks:
      - "player2.database"

  # Build the container for the api
  player2server:
    build:
      context: "./"
      dockerfile: "./build/Dockerfile" # It will look for a Dockerfile in the project root and build it
    ports:
      - "8080" # Exposes the port 8080 from a container and binds it to a random port
    restart: "always" # If the container goes down, it will restart
    depends_on:
      - "player2mysql_db" # Wait service `player2mysql_db` to open
    deploy:
      replicas: 1 # Starts up 3 replicas of the same image
    # Connects the API to a common player2api.network bridge
    networks:
      - "player2.database"
      - "player2api.network"

  # nginx container
  player2nginx:
    # specifies the latest nginx image
    image: nginx:latest
    container_name: player2nginx_proxy
    # Connects the conf file of the container to the conf file in our folder
    volumes:
      - ./build/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
      - player2server
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
      - "80:8080"
    restart: always
    networks:
      - "player2api.network"
volumes:
  player2_dbdata:
networks:
  player2api.network:
  player2.database:
